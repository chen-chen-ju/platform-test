2020/09/25 增加了一个天线接收测试cpp文件，包括MMSE、MR、ZF三种接收方式。
2020/09/29 在SystemSim_NRuRLLC的conclude函数和Network_NRuRLLC的Conclude()和ConcludeIteration()添加了new对象的析构；
	修改了NetworkMS_NRuRLLC.cpp和SchedulingMS_NRuRLLC.cpp，将MS的Buffer操作搬移到了scheduling模块。
2020/09/30 在SchedulingMS_NRuRLLC.h增加了与Packet相关的成员变量，模拟packet缓存区；	SchedulingBS_NRuRLLC.h增加了成员变量TB，模拟传输块；
	SchedulingMS_NRuRLLC.cpp中initial和buffer_update进行相应修改；
	SchedulingBS_NRuRLLC.cpp中MS资源分配部分，进行了缓存更新和SDU切割操作、TB装配操作。
2020/10/05 在SchedulingBS的reset中增加了TB的清空和空间释放，修改了SystemSim的reset函数的流程；
	在PeformingMS中，将需要重传的TB重新放回MS的Packet缓存的头部，优先进行传输。相应修改了PeformingBS的Measure函数；
	在Scheduling_NRuRLLC.h中增加了成员变量resource_used，记录每个基站使用的资源，以便后续计算干扰。
2020/10/15 在SchedulingBS中增加ratio成员，记录功率分配的比例。作为参数，在SchedulingMS的ReceivedSINR()函数中进行功率计算。
	在SchedulingMS中，修改了Feedback()函数，使得在TTI不为0时，上报的SINR是根据上一个TTI的资源分配情况，更符合实际传输的信道状况。
	同时对噪声功率计算进行更正。因为是对每个RB进行SINR计算，然后平均化，所以底噪带宽应该为RB带宽。
2020/10/20 在3DSpatialChannelModel_NRuRLLC的Pathloss函数中，在用概率losProbability判断是否为LOS，对MS[src]->channel->channelCondition进行更新，否则会一直处于LOS状态，使得只要MS[src]->network->location是outdoor就有直射径。
因为过程是按照site顺序进行的，不需要使用列表式存储UE对所有BS的condition状况，使用单变量进行重复利用即可，可以提高内存利用率。
 	重点！！！在ChannelMS_NRuRLLC的DiscreteFourierTransform函数中，原先使用的是MS[src]->channel->HtLOS[si, pr]来获取用户到不同基站的LOS系数。经测试，该方法随着si变化，始终只能得到si=0情况时的LOS信道参数，有问题。
改为MS[src]->channel->HtLOS(si, pr)后就能解决，但此问题好像是和变量格式有关。因为对于RSRP()函数中的cluster_P_1变量、RSRP变量这种向量形式都没有此问题(某一维度大小是1)。
	在ChannelMS_NRuRLLC的ChannelCoefficient()函数中，变量SI_H_t和MS[src]->channel->Ht初始化大小应该在原本簇数上加4，即MAX_CLUSTER+4，因为最强两径又被分为3个子簇。相应的，修改MS[src]->channel->Ht的初始化过程。
2020/10/21 在ChannelMS_NRuRLLC中增加了vector<int> channelCondition0，主要为了输出显示，其他功能与channelCondition重复，后续如果不需要可以考虑删除。
	相应地，修改了3DSpatialChannelModel_NRuRLLC的Pathloss函数。
2020/10/23 修改了ChannelMS_NRuRLLC的ApplyPathLossAndShadowing函数中，增加大尺度衰落系数，只是乘上根号的CouplingLoss。因为有用信号功率为h^2*P；
	修改了SchedulingMS，增加了inband的测量（每个RB的测量），加入了成员变量<vector> spectralEfficiency、ESINRdB和inband_mcs。修改了函数Feedback()和ReceivedSINR()，还有相应的初始化。
2020/10/26 把SchedulingMS的inband_mcs改名为subband_mcs,服从标准的称呼。
2020/10/27 增加HARQ功能。考虑到重传数据与初始传输数据需要保证TB的大小一致，我们在SLS_NRuRLLC.h中增加了结构体TransBlock来记录TB的信息，包括所属的ms_ID、包含的pdu、TB size、重传次数、mcs和软合并的sinr等信息；
	在SchedulingMS中，增加了结构体HARQentity，记录每个出错TB的下次可重传的倒计时。增加了vector类型的HARQ缓存区，实现每个用户的多个HARQ进程。在BufferUpdate()中，每次进行buffer时，
	更新HARQ缓存中所有数据的定时Timer，若第一个数据Timer为0，说明要进行重传；
	在SchedulingBS中修改了TB的数据类型，使用新的TransBlock类型来记录每个TB；
	在PerformanceMS和PerformanceBS进行了相应的更改，软合并的SINR放入出错的TB中。
2020/10/28 修改了SchedulingMS的ReceiveSINR()函数,输入参数TB，将TB的SINR进行软合并。不再使用用户上一次出错的SINR，因为一个用户有8个HARQ进程，需要软合并相应的进程。
